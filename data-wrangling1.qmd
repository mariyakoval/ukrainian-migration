---
title: "data-wrangling"
format: html
---

```{r, include=FALSE, warning=FALSE}

# Load necessary packages
if (!require('pacman')) install.packages('pacman'); library('pacman')
pacman::p_load(viridis, tidyverse, ggplot2, lubridate, knitr, dplyr, ggpubr, 
              janitor, tidyr, kableExtra, ggcorrplot, ggthemes, zoo, purr,
              gridExtra, grid, Hmisc, FSA, dunn.test, readxl, RColorBrewer,
              randomForest, caret, car, brglm2, detectseparation,
              ResourceSelection)
# Load data
data_ee <- read.csv("Data/UNHCR_EST_2023_MSNA_hh_data_v1.csv")
data_eu <- read_csv("Data/EU_countries.csv")
data_eu_ind <- read_csv("Data/EU_Ind.csv")
```

```{r}
# Filter out countries that aren't included in the analysis
data_eu <- data_eu |>
  filter(!is.na(country) & country != 0 & 
           !(country %in% c("Bulgaria", "Hungary", "construct")))

# Function to create a clean proportion table
make_prop_table <- function(variable) {
  tibble(
    Category = names(table(variable, useNA = "ifany")),
    Count = as.numeric(table(variable, useNA = "ifany")),
    Percent = round(100 * (prop.table(table(variable, useNA = "ifany"))), 2)
  )
}
```


```{r}

#Select the variables of interest from 3 datasets (Estonia, Europe HH and Ind)
data_ee <- data_ee |>
  select(introduction_resp_age, demographics_educ_level,
         demographics_resp_activity, host_country_SE2_11_SS_INC_SOR,
         host_country_diff_work, host_country_work_coa,
         urgent_needs_urgent_needs_first, host_country_SE2_11b_SM_BEN_HST, 
         social_cohesion_SC3_SS_EXP_HOSTILE, 
         social_cohesion_SC4_SM_HOSTILE_TYP, hh_id) |> 
 rename(income_source = host_country_SE2_11_SS_INC_SOR,
        socioecon_needs = urgent_needs_urgent_needs_first,
        socbenefits = host_country_SE2_11b_SM_BEN_HST,
        hostile_behavior = social_cohesion_SC3_SS_EXP_HOSTILE,
        hostile_behavior_type = social_cohesion_SC4_SM_HOSTILE_TYP)|> 
              mutate(country = "Estonia")

data_eu <- data_eu |>
  select(SE2_11_SS_INC_SOR, 
         SE2_14_SM_SOC_AST_TYP, SE2_11b_SM_BEN_HST, country, 
         SC3_SS_EXP_HOSTILE, SC4_SM_HOSTILE_TYP, hh_id) |>
  rename(income_source = SE2_11_SS_INC_SOR,
         socioecon_needs = SE2_14_SM_SOC_AST_TYP,
         socbenefits = SE2_11b_SM_BEN_HST,
         hostile_behavior = SC3_SS_EXP_HOSTILE,
         hostile_behavior_type = SC4_SM_HOSTILE_TYP)

data_eu_ind <- data_eu_ind |>
  select(SE1_SS_EDU_LVL, SE2_SS_WORK, SE12_SM_EMP_BARR, SE8_SS_ACTIVITY,
         SE13_SS_WRK_TYP, country, hh_id, DR_11_NUM_AGE) |>
  rename(demographics_educ_level = SE1_SS_EDU_LVL,
         host_country_diff_work = SE12_SM_EMP_BARR,
         demographics_resp_activity = SE13_SS_WRK_TYP) |>
  mutate(
    age_group = case_when(
      DR_11_NUM_AGE >= 18 & DR_11_NUM_AGE <= 34 ~ "18-34",
      DR_11_NUM_AGE >= 35 & DR_11_NUM_AGE <= 59 ~ "35-59",
      DR_11_NUM_AGE >= 60 ~ "60+",
      TRUE ~ NA_character_
    )
  )

#--------------------------------------------------------------------
 
# 'SE8_SS_ACTIVITY': if respondent worked (SE2_SS_WORK == "yes"), label "employed"
# SE8_SS_ACTIVITY contains data on actviity if unemployed
# So 2 columns' data is merged
data_eu_ind <- data_eu_ind |>
  mutate(SE8_SS_ACTIVITY = case_when(
    SE2_SS_WORK == "yes" ~ "employed",
    TRUE ~ SE8_SS_ACTIVITY)) |>
  # Remove rows where all of the listed columns are NA
    filter(!if_all(c(
      "demographics_educ_level",
      "SE2_SS_WORK",
      "host_country_diff_work",
      "SE8_SS_ACTIVITY",
      "demographics_resp_activity"
    ), is.na)) |>
  # Rename the updated column to for merging
  rename(host_country_work_coa = SE8_SS_ACTIVITY, 
         introduction_resp_age = age_group)
```

```{r}
common_cols <- c(
  "demographics_educ_level",
  "demographics_resp_activity",
  "host_country_diff_work",
  "country",
  "host_country_work_coa",
  "hh_id",
  "introduction_resp_age"
)

# Combine tows of EU Ind and EE data by common columns
combined_ind <- bind_rows(
  select(data_eu_ind, all_of(common_cols)),
  select(data_ee, all_of(common_cols)))|>
    filter(!if_all(c(
       "demographics_educ_level",
       "demographics_resp_activity",
       "host_country_diff_work",
        "host_country_work_coa"), is.na))|> 
    mutate(host_country_work_coa = case_when(
    tolower(host_country_work_coa) %in% c("employed_here", "employed_remote", "self_employed", "employed") ~ "Employed",
    tolower(host_country_work_coa) %in% c("status_unempl", "unemployed") ~ "Unemployed",
    grepl("house", host_country_work_coa, ignore.case = TRUE) ~ "Housekeeping",
    grepl("hh_resp", host_country_work_coa, ignore.case = TRUE) ~ "Housekeeping",
    grepl("ill", host_country_work_coa, ignore.case = TRUE) ~ "Long term illness/injury",
    grepl("stud", host_country_work_coa, ignore.case = TRUE) ~ "Studying",
    grepl("train", host_country_work_coa, ignore.case = TRUE) ~ "Trainee",
    grepl("intern", host_country_work_coa, ignore.case = TRUE) ~ "Trainee",
    grepl("volunt", host_country_work_coa, ignore.case = TRUE) ~ "Other",
    grepl("other", host_country_work_coa, ignore.case = TRUE) ~ "Other",
    grepl("prefer", host_country_work_coa, ignore.case = TRUE) ~ "Other",
    grepl("retired", host_country_work_coa, ignore.case = TRUE) ~ "Retired",
    TRUE ~ host_country_work_coa )) |>
    mutate(demographics_resp_activity = case_when(
    tolower(demographics_resp_activity) %in% c("employee", "self_employed", "employed", "family_business") ~ "Employed",
    tolower(demographics_resp_activity) %in% c("unemployed") ~ "Unemployed",
    grepl("other", demographics_resp_activity, ignore.case = TRUE) ~ "Other",
    grepl("prefer_no_answer", demographics_resp_activity, ignore.case = TRUE) ~ "Other",
    grepl("unpaid", demographics_resp_activity, ignore.case = TRUE) ~ "Other",
    grepl("retired", demographics_resp_activity, ignore.case = TRUE) ~ "Retired",
    grepl("engaged_in_HH_resp", demographics_resp_activity, ignore.case = TRUE) ~ "Housekeeping",
    grepl("housekeeping", demographics_resp_activity, ignore.case = TRUE) ~ "Housekeeping",
    grepl("stud", demographics_resp_activity, ignore.case = TRUE) ~ "Studying",
    grepl("train", demographics_resp_activity, ignore.case = TRUE) ~ "Trainee",
    grepl("ill", demographics_resp_activity, ignore.case = TRUE) ~ "Long term illness/injury",
    TRUE ~ demographics_resp_activity )) 

#--------------------------------------------------------------------

# Combine tows of EU HH and EE data by common columns

common_cols1 <- c(
  "income_source",
  "socioecon_needs",
  "socbenefits",
  "country",
  "hh_id",
   "hostile_behavior",
   "hostile_behavior_type"
)

combined_hh <- bind_rows(
  select(data_eu, all_of(common_cols1)),
  select(data_ee, all_of(common_cols1)))

#--------------------------------------------------------------------

#Merge two datasets by household id
combined_data <- merge(combined_hh, combined_ind, by = c("country", "hh_id"))

#Refactor the employed/unemployed variable into a binary variable
combined_data <- combined_data |>
  mutate(employed_binary = 
           ifelse(host_country_work_coa == "Employed", 1, 0)) |>
  #Normalize responses of hostile behavior category 
  mutate (hostile_behavior = case_when (
    hostile_behavior %in% c("prefer_no_answer", "PreferNotAnswer") ~ "prefer_no_answer",
    hostile_behavior %in% c("do_not_know", "DoNotKnow") ~ "do_not_know",
    TRUE ~ hostile_behavior
  )) |>
 mutate(hostile_behavior_type = case_when(
    hostile_behavior == "no" ~ "none",
    TRUE ~ hostile_behavior_type))

#Convert variables to factors
combined_data <- combined_data |>
  mutate(
    demographics_educ_level = as.factor(demographics_educ_level),
    demographics_resp_activity = as.factor(demographics_resp_activity),
    socioecon_needs = as.factor(socioecon_needs),
    socbenefits = as.factor(socbenefits),
    income_source = as.factor(income_source),
    hostile_behavior = as.factor(hostile_behavior),
    hostile_behavior = as.factor(hostile_behavior_type)
  ) 
```

```{r}

combined_data <- combined_data|>
  mutate(row_id = row_number())

income_dummies <- combined_data |>
  select(row_id, income_source) |>
  separate_rows(income_source, sep = " ") |>
  mutate(income_source = str_trim(income_source)) |>
  mutate(income_source = case_when(
    income_source %in% c("employment_remote", 
                         "remote_work__for_other_country_that_the_") ~ "employment_remote",
    income_source %in% c("employment_host_country") ~ "employment_host_country",
    income_source %in% c("employment_ukraine_country", 
                         "continued_to_be_employed_in_ukraine__inc") ~ "employment_ukraine_country",
    income_source %in% c("do_not_know", "dont_know") ~ "do_not_know",
    income_source %in% c("prefer_not_to_answer", "prefer_no_answer") ~ "prefer_no_answer",
    TRUE ~ income_source
  ))|>
  mutate(flag = 1) |>
  pivot_wider(names_from = income_source,
              values_from = flag,
              values_fill = list(flag = 0),
              names_prefix = "income_")

combined_data <- combined_data |>
  left_join(income_dummies, by = "row_id")

#-------------------------------------------------------
  
diff_dummies <- combined_data |>
  select(row_id, host_country_diff_work) |>
  separate_rows(host_country_diff_work, sep = " ")|>
  mutate(host_country_diff_work = str_trim(host_country_diff_work))|>
    mutate(host_country_diff_work = case_when(
    host_country_diff_work %in% c("lack_of_local_language", 
                         "lack_lang") ~ "lack_of_lang",
     host_country_diff_work %in% c( 
                         "lack_childcare", "lack_of_childcare") ~ "lack_childcare",
     host_country_diff_work %in% c("discrimination", 
                         "discrim") ~ "discrimination",
     host_country_diff_work %in% c("lack_of_information", 
                         "lack_info") ~ "lack_of_info",
    host_country_diff_work %in% c("lack_of_registered_address", 
                         "lack_address") ~ "lack_of_address",
    host_country_diff_work %in% c("lack_permit", 
                         "lack_of_work_permit") ~ "lack_of_work_permit",
    host_country_diff_work %in% c("not_staying", "not_planning_to_stay") ~ "leaving",
    host_country_diff_work %in% c("lack_docum", "lack_of_other_documentation") ~ "lack_of_documentation",
     #    host_country_diff_work %in% c("lack_of_decent_employment", 
     #                     "lack_of_age_opportunities", "lack_opp") ~ "lack_of_opportunities",
     # host_country_diff_work %in% c("lack_of_education_skills", 
     #                     "lack_of_skills") ~ "lack_of_skills",
    TRUE ~ host_country_diff_work
  ))|>
  mutate(flag = 1) |>
  pivot_wider(names_from = host_country_diff_work,
              values_from = flag,
              values_fill = list(flag = 0),
              names_prefix = "diff_")

combined_data <- combined_data |>
  left_join(diff_dummies, by = "row_id")

#-------------------------------------------------------

needs_dummies <- combined_data |>
  select(row_id, socioecon_needs)|>
  separate_rows(socioecon_needs, sep = " ") |>
  mutate(socioecon_needs = str_trim(socioecon_needs)) |>
   mutate(socioecon_needs = case_when(
    socioecon_needs %in% c("employment", 
                         "employment_assistance") ~ "employment",
    socioecon_needs %in% c("medical", 
                         "health_services") ~ "medical",
    socioecon_needs %in% c("material", 
                         "humanitarian assistance") ~ "material",
    socioecon_needs %in% c("accommodation", 
                         "housing_support") ~ "accommodation",
    socioecon_needs %in% c("education_support", 
                         "education_aduls") ~ "education_support",
    socioecon_needs %in% c("education_children", 
                         "childcare") ~ "childcare",
    TRUE ~ socioecon_needs
  ))|>
  mutate(flag = 1) |>
  pivot_wider(names_from = socioecon_needs,
              values_from = flag,
              values_fill = list(flag = 0),
              names_prefix = "needs_")

combined_data <- combined_data |>
  left_join(needs_dummies, by = "row_id")

#-------------------------------------------------------

benefits_dummies <- combined_data |>
  select(row_id, socbenefits) |>
  separate_rows(socbenefits, sep = " ") |>
  mutate(socbenefits = str_trim(socbenefits)) |>
  mutate(flag = 1) |>
  pivot_wider(names_from = socbenefits,
              values_from = flag,
              values_fill = list(flag = 0),
              names_prefix = "benefits_")

combined_data <- combined_data|>
  left_join(benefits_dummies, by = "row_id")

#-------------------------------------------------------

hostile_dummies <- combined_data |>
  select(row_id, hostile_behavior_type) |>
  separate_rows(hostile_behavior_type, sep = " ") |>
  mutate(hostile_behavior_type = str_trim(hostile_behavior_type)) |>
  mutate(hostile_behavior_type = case_when(
    hostile_behavior_type %in% c("prefer_not_to_answer", "prefer_no_answer") ~ "prefer_not_to_answer",
   TRUE ~ hostile_behavior_type
  )) |>
  mutate(flag = 1) |>
  pivot_wider(names_from = hostile_behavior_type,
              values_from = flag,
              values_fill = list(flag = 0),
              names_prefix = "hostile_")

combined_data <- combined_data |>
  left_join(hostile_dummies, by = "row_id")

#-------------------------------------------------------

combined_data <- combined_data|>
  mutate(demographics_educ_level_grouped = case_when(
    demographics_educ_level %in% c("tech", "tech_vocat") ~ "technical",
    demographics_educ_level %in% c("phd", "phd_doctor", "grand_phd") ~ "phd_group",
    demographics_educ_level == "master" ~ "master",
    demographics_educ_level == "no_edu" ~ "no_edu",
    demographics_educ_level %in% c("pri_edu", "sec_edu", "secondary") ~ "primary_secondary",
    demographics_educ_level == "specialization" ~ "specialization",
    TRUE ~ as.character(demographics_educ_level)
  )) |>
  mutate(socbenefits = ifelse(is.na(socbenefits), "none", socbenefits)) |>
  select(-income_NA, -hostile_NA, -benefits_NA, -needs_NA, -diff_NA)

```

**Aggregated data**

```{r}
split_category_proportions_by_country <- function(data, category_col, country_col) {
  data[[category_col]] <- as.character(data[[category_col]])
  data[[country_col]] <- as.character(data[[country_col]])
  data <- data[!is.na(data[[category_col]]) & data[[category_col]] != "" & 
                 !is.na(data[[country_col]]) & data[[country_col]] != "", ]
  
  result_list <- list()
  for (cntry in unique(data[[country_col]])) {
    subset_data <- data[data[[country_col]] == cntry, ]
    cat_table <- prop.table(table(subset_data[[category_col]]))
    
    component_list <- list()
    for (name in names(cat_table)) {
      components <- unlist(strsplit(name, " "))
      prop_per_component <- cat_table[[name]] / length(components)
      
      for (comp in components) {
        if (!is.null(component_list[[comp]])) {
          component_list[[comp]] <- component_list[[comp]] + prop_per_component
        } else {
          component_list[[comp]] <- prop_per_component
        }
      }
    }
    
    temp_df <- data.frame(
      Component = names(component_list),
      Total_Proportion = unlist(component_list),
      Country = cntry
    )
    result_list[[cntry]] <- temp_df
  }
  final_df <- do.call(rbind, result_list)
  rownames(final_df) <- NULL
  
  return(final_df[order(final_df$Country, -final_df$Total_Proportion), ])
}

income_df <- split_category_proportions_by_country(
  data = combined_hh,
  category_col = "income_source",
  country_col = "country"
)

jobs_df <- split_category_proportions_by_country(
  data = combined_ind,
  category_col = "host_country_diff_work",
  country_col = "country"
)

needs_df <- split_category_proportions_by_country(
  data = combined_hh,
  category_col = "socioecon_needs",
  country_col = "country"
)

benefits_df <- split_category_proportions_by_country(
  data = combined_hh,
  category_col = "socbenefits",
  country_col = "country"
)

cohesion_df <- split_category_proportions_by_country(
  data = combined_data,
  category_col = "hostile_behavior_type",
  country_col = "country")
```

```{r}

add_source_label <- function(df, source_name) {
  df <- df[, c("Country", "Component", "Total_Proportion")] 
  df$Source <- source_name
  return(df)
}

df_list <- list(
  income = income_df,
  job = jobs_df,
  needs = needs_df,
  benefits = benefits_df,
  cohesion = cohesion_df
)

combined_df <- imap_dfr(df_list, ~ add_source_label(.x, .y))

needs_df <- combined_df |>
  filter(Source == "needs") |>
  mutate(Component = case_when(
    grepl("employment", Component, ignore.case = TRUE) ~ "Employment",
    grepl("hous|accom", Component, ignore.case = TRUE) ~ "Accommodation",
    grepl("med|health", Component, ignore.case = TRUE) ~ "Healthcare",
    grepl("educ", Component, ignore.case = TRUE) ~ "Education",
    grepl("govt", Component, ignore.case = TRUE) ~ "Government assistance",
    grepl("human", Component, ignore.case = TRUE) ~ "Humanitarian assistance",
    grepl("prefer", Component, ignore.case = TRUE) ~ "Prefer no answer",
    grepl("none", Component, ignore.case = TRUE) ~ "None",
    TRUE ~ Component
  ))

benefits_df <- combined_df |>
  filter(Source == "benefits") |>
  mutate(Component = case_when(
    grepl("cash", Component, ignore.case = TRUE) ~ "Cash benefits",
    grepl("child", Component, ignore.case = TRUE) ~ "Family grant",
    grepl("disab", Component, ignore.case = TRUE) ~ "Disability grant",
    grepl("unemp", Component, ignore.case = TRUE) ~ "Unemployment grant",
    grepl("prefer", Component, ignore.case = TRUE) ~ "Prefer no answer",
    grepl("do_not", Component, ignore.case = TRUE) ~ "Don't know",
    grepl("other", Component, ignore.case = TRUE) ~ "Other Source",
    TRUE ~ Component
  ))

job_df <- combined_df |>
  filter(Source == "job") |>
  mutate(Component = case_when(
    grepl("lang", Component, ignore.case = TRUE) ~ "Language barrier",
    grepl("decent|opp", Component, ignore.case = TRUE) ~ "Insuffisient opportunities",
    grepl("skills", Component, ignore.case = TRUE) ~ "Lack of skills",
    grepl("care", Component, ignore.case = TRUE) ~ "Care for others",
    grepl("none", Component, ignore.case = TRUE) ~ "None",
    grepl("recog", Component, ignore.case = TRUE) ~ "Lack of recognition",
    grepl("looking", Component, ignore.case = TRUE) ~ "Not looking for work",
    TRUE ~ Component
  ))

income_df <- combined_df |>
  filter(Source == "income") |>
  mutate(Component = fct_recode(Component,
    "Job" = "employment_host_country",
    "Job" = "employment_remote",
    "Social Protection" = "social_protection_host_govt",
    "Social Protection from Ukraine" = "social_protection_ukr_govt",
    "Job in Ukraine" = "employment_ukraine_country",
    "Remmittances" = "remmittances",
    "No income" = "no_income",
    "Other Sources" = "other_sources",
    "No Answer" = "prefer_no_answer",
    "Don't know" = "do_not_know",
    "Don't know" = "dont_know"
  ))

cohesion_df <- combined_df |>
  filter(Source == "cohesion")

combined_df <- bind_rows(needs_df, benefits_df, job_df, income_df, cohesion_df)

levels(combined_df$coh)

saveRDS(combined_df, "Data/combined_df")
saveRDS(combined_data, "Data/combined_data")
```